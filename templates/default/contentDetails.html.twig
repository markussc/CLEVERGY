{% set contactAvailable = false %}
{% if is_granted('ROLE_OWNER') %}
    <div id="pcowebModeModal" class="reveal" data-reveal>
      <h4 id="pcowebModeModalTitle">{% trans %}label.pco.mode{% endtrans %}</h4>
      <p class="lead">{% trans %}label.pco.select_pcoweb_mode_lead{% endtrans %}</p>
      <select class="select2" id="pcowebModeSelect">
          <option value="0">{% trans %}label.pco.mode.auto{% endtrans %}</option>
          <option value="1">{% trans %}label.pco.mode.manual{% endtrans %}</option>
          <option value="-1">{% trans %}label.pco.mode.holiday{% endtrans %}</option>
      </select>
      <hr>
      <button type="button" onclick="sendCommand(['settings', 'mode', 'pcoweb', $('#pcowebModeSelect').val()])">{% trans %}label.pco.mode.save{% endtrans %}</button>
      <button class="close-button" data-close aria-label="Close modal" type="button">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div id="ppModeModal" class="reveal" data-reveal>
      <h4 id="ppModeModalTitle">{% trans %}label.pco.pp_status{% endtrans %}</h4>
      <p class="lead">{% trans %}label.pco.select_pp_mode_lead{% endtrans %}</p>
      <select class="select2" id="ppModeSelect">
          <option value="0">{% trans %}label.pco.ppmode.summer{% endtrans %}</option>
          <option value="1">{% trans %}label.pco.ppmode.auto{% endtrans %}</option>
          <option value="2">{% trans %}label.pco.ppmode.holiday{% endtrans %}</option>
          <option value="3">{% trans %}label.pco.ppmode.party{% endtrans %}</option>
          <option value="4">{% trans %}label.pco.ppmode.2nd{% endtrans %}</option>
      </select>
      <hr>
      <button type="button" onclick="sendCommand(['pcoweb', 'mode', $('#ppModeSelect').val()])">{% trans %}label.pco.ppmode.save{% endtrans %}</button>
      <button class="close-button" data-close aria-label="Close modal" type="button">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
{% endif %}
<div class="row">
{% if currentStat['smartFox'] is defined %}
<div class="small-12 medium-3 columns refresh" id="smartfoxOuter">
    <div id="smartfox">
    <h4>{% trans %}label.energy{% endtrans %}</h4>
    <ul>
        <li>{% trans %}label.smartfox.int_power{% endtrans %}: {{ currentStat['smartFox']['power_io'] + currentStat['smartFox']['PvPower'][0] }} W</li> {# TODO: sum up all PV powers #}
        <li>{% trans %}label.smartfox.pv_power{% endtrans %}: {{ currentStat['smartFox']['PvPower']|join(', ') }} W</li>
        <li>{% trans %}label.smartfox.net_power{% endtrans %}: {{ currentStat['smartFox']['power_io'] }} W</li>
        <li>{% trans %}label.smartfox.self_usage_today{% endtrans %}: {% if currentStat['smartFox']['energyToday'] and currentStat['smartFox']['energyToday'] >= currentStat['smartFox']['day_energy_out'] %}{{ ((currentStat['smartFox']['energyToday'] - currentStat['smartFox']['day_energy_out']) / currentStat['smartFox']['energyToday'] * 100) |round }} %{% else %}---{% endif %}</li>
        <li>{% trans %}label.smartfox.self_suff_degree_today{% endtrans %}: {% if currentStat['smartFox']['energyToday'] and currentStat['smartFox']['energyToday'] >= currentStat['smartFox']['day_energy_out'] %}{{ (100/(currentStat['smartFox']['energyToday'] + currentStat['smartFox']['day_energy_in'] - currentStat['smartFox']['day_energy_out'])*(currentStat['smartFox']['energyToday']-currentStat['smartFox']['day_energy_out']))|round }} %{% else %}---{% endif %}</li>
    </ul>
    </div>
    <div class="chart" style="display:none;">
        <span class="chartId">currentPower</span>
        <span class="chartData">[{{ currentStat['smartFox']['power_io'] + currentStat['smartFox']['PvPower'][0] }}, {{ currentStat['smartFox']['PvPower'][0] }}, {{ currentStat['smartFox']['power_io'] }}]</span>
        <span class="chartColor">{"0":["grey", "grey"], "1":["yellow", "yellow"], "2":["chartreuse", "red"]}</span>
    </div>
    <div class="chart" style="display:none;">
        <span class="chartId">energyDay</span>
        <span class="chartData">[{{ currentStat['smartFox']['day_energy_in'] / 1000 }}, {{ currentStat['smartFox']['day_energy_out'] / 1000 }}, {{ currentStat['smartFox']['energyToday']/1000 }}{% if currentStat['conexio']|default(false) %}, {{ currentStat['conexio']['energyToday']|default(0) }}{% endif %}]</span>
    </div>
</div>
{% endif %}
{% if currentStat['conexio']|default(false) or currentStat['logoControl']|default(false) %}
<div class="small-12 medium-3 columns refresh" id="conexio">
    <h4>{% trans %}label.solarheat{% endtrans %}</h4>
    <ul>
    {% for idx, sensor in connectors['conexio']['sensors']|default([]) %}
        <li>{{ sensor[0] }}: {{ currentStat['conexio'][idx]|default('--') }}{{ sensor[1] }}</li>
    {% endfor %}
    {% for sensor in connectors['logocontrol']['sensors']|default([]) %}
        {{ sensor[0] }}: {{ currentStat['logoControl'][sensor[0]] }}{{ sensor[1] }}<br/>
    {% endfor %}
    </ul>
</div>
{% endif %}
{% if currentStat['pcoWeb'] is defined %}
<div class="small-12 medium-3 columns refresh" id="pcoWeb">
    <h4>{% trans %}label.heating{% endtrans %}</h4>
    <ul>
        <li>{% trans %}label.pco.water_temp{% endtrans %}: {{ currentStat['pcoWeb']['waterTemp']|default('---') }}°C</li>
        <li>{% trans %}label.pco.storage_temp{% endtrans %}: {{ currentStat['pcoWeb']['storTemp']|default('---') }}°C</li>
        <li>{% trans %}label.pco.cp_status{% endtrans %}: {{ currentStat['pcoWeb']['cpStatus']|default('---')|trans }}</li>
        <li>{% trans %}label.pco.set_distr_temp{% endtrans %}: {{ currentStat['pcoWeb']['setDistrTemp']|default('---') }}°C</li>
        <li>{% trans %}label.pco.eff_distr_temp{% endtrans %}: {{ currentStat['pcoWeb']['effDistrTemp']|default('---') }}°C</li>
        <li>{% trans %}label.pco.mode{% endtrans %}: <a href="#" data-open="pcowebModeModal">{{ currentStat['pcoWeb']['mode']|default('---')|trans }}</a></li>
        <li>{% trans %}label.pco.pp_mode{% endtrans %}: <a href="#" data-open="ppModeModal">{{ currentStat['pcoWeb']['ppMode']|default('---')|trans }}</a></li>
        <li>{% trans %}label.pco.pp_status{% endtrans %}: {{ currentStat['pcoWeb']['ppStatus']|default('---')|trans }}{% if currentStat['pcoWeb']['ppStatusMsg']|default('---')|trans != currentStat['pcoWeb']['ppStatus']|default('---')|trans %} ({{ currentStat['pcoWeb']['ppStatusMsg']|default('---')|trans }}){% endif %}</li>
        <li>{% trans %}label.pco.pre_temp{% endtrans %}: {{ currentStat['pcoWeb']['preTemp']|default('---') }}°C</li>
        <li>{% trans %}label.pco.back_temp{% endtrans %}: {{ currentStat['pcoWeb']['backTemp']|default('---') }}°C</li>
        <li>{% trans %}label.pco.pp_source_in_temp{% endtrans %}: {{ currentStat['pcoWeb']['ppSourceIn']|default('---') }}°C</li>
        <li>{% trans %}label.pco.pp_source_out_temp{% endtrans %}: {{ currentStat['pcoWeb']['ppSourceOut']|default('---') }}°C</li>
    </ul>
</div>
{% endif %}
{% if currentStat['mobileAlerts']|default(false) or currentStat['pcoWeb']|default(false) or currentStat['openweathermap']|default(false) %}
<div class="small-12 medium-3 columns refresh" id="mobileAlerts">
    <h4>{% trans %}label.climate{% endtrans %}</h4>
    <ul>
        {% if currentStat['openweathermap']|default(false) %}
            <li>{% trans %}label.openweathermap.clouds_current{% endtrans %}: {{ currentStat['openweathermap']['currentClouds'] }} %</li>
            <li>{% trans %}label.openweathermap.clouds_next_daylight{% endtrans %}: {{ currentStat['openweathermap']['cloudsNextDaylight'] }}%</li>
        {% endif %}
        {% if currentStat['pcoWeb']|default(false) %}<li>{% trans %}label.pco.outside_temp{% endtrans %}: {{ currentStat['pcoWeb']['outsideTemp'] }} °C</li>{% endif %}
    {% for maSensor in currentStat['mobileAlerts']|default([]) %}
        {% for measurement in maSensor if measurement['label'] != 'timestamp' %}
            {% if measurement['usage']|default('') == 'contact' %}
                {% set contactAvailable = true %}
            {% else %}
            <li>{{ measurement['label']}}: {{ measurement['value'] }} {{ measurement['unit'] }}</li>
            {% endif %}
        {% endfor %}
    {% endfor %}
    </ul>
</div>
{% endif %}
{% if currentStat['edimax'] is defined or currentStat['mystrom'] is defined%}
<div class="small-12 medium-3 columns refresh" id="edimax">
    <h4>{% trans %}label.devices{% endtrans %}</h4>
    <ul>
    {% for key, device in currentStat['edimax']|default([]) %}
        <li>
            {{ device['name']}}: <a href="javascript:void(0);" {% if is_granted('ROLE_OWNER') %}onclick="sendCommand(['edimax', {{ key }}, {{ (device['status']['val'] + 1) % 2 }}])"{% endif %}>{{ device['status']['label']|trans }}</a> |
            <a href="javascript:void(0);" {% if is_granted('ROLE_OWNER') %}onclick="sendCommand(['settings', 'mode', '{{ device['ip'] }}', {{ (device['mode'] + 1) % 2 }}])"{% endif %}><i class="fa {% if device['mode'] %}fa-lock{% else %}fa-lock-open{% endif %}"></i></a> |
            <a title="{% trans %}label.edimax.activation_interval_today{% endtrans %}"><i class="fa fa-clock-o"></i> {{ (device['activeMinutes']/60)|round(0, 'floor') }}h {{ device['activeMinutes']%60 }}m</a>
        </li>
    {% endfor %}
    {% for key, device in currentStat['mystrom']|default([]) %}
        <li>
            {{ device['name']}}: <a href="javascript:void(0);" {% if is_granted('ROLE_OWNER') %}onclick="sendCommand(['mystrom', {{ key }}, {{ (device['status']['val'] + 1) % 2 }}])"{% endif %}>{{ device['status']['label']|trans }}</a> |
            <a href="javascript:void(0);" {% if is_granted('ROLE_OWNER') %}onclick="sendCommand(['settings', 'mode', '{{ device['ip'] }}', {{ (device['mode'] + 1) % 2 }}])"{% endif %}><i class="fa {% if device['mode'] %}fa-lock{% else %}fa-lock-open{% endif %}"></i></a> |
            <a title="{% trans %}label.edimax.activation_interval_today{% endtrans %}"><i class="fa fa-clock-o"></i> {{ (device['activeMinutes']/60)|round(0, 'floor') }}h {{ device['activeMinutes']%60 }}m</a>
        </li>
    {% endfor %}
    {% for key, device in currentStat['shelly']|default([]) %}
        <li>
            {{ device['name']}}: <a href="javascript:void(0);" {% if is_granted('ROLE_OWNER') and device['status']['val'] < 2 %}onclick="sendCommand(['shelly', {{ key }}, {{ (device['status']['val'] + 1) % 2 }}])"{% endif %}>{{ device['status']['label']|trans }}</a> |
            <a href="javascript:void(0);" {% if is_granted('ROLE_OWNER') %}onclick="sendCommand(['settings', 'mode', '{{ device['ip'] }}', {{ (device['mode'] + 1) % 2 }}])"{% endif %}><i class="fa {% if device['mode'] %}fa-lock{% else %}fa-lock-open{% endif %}"></i></a> |
            <a title="{% trans %}label.edimax.activation_interval_today{% endtrans %}"><i class="fa fa-clock-o"></i> {{ (device['activeMinutes']/60)|round(0, 'floor') }}h {{ device['activeMinutes']%60 }}m</a>
        </li>
    {% endfor %}
    </ul>
</div>
{% endif %}
{% if mobilealertsConnector.contactAvailable()|default(false) or mystromConnector.motionAvailable|default(false) or shellyConnector.doorAvailable()|default(false) %}
<div class="small-12 medium-3 columns refresh" id="alarm">
    <h4>{% trans %}label.alarm{% endtrans %}</h4>
    <ul>
    {% for maSensor in currentStat['mobileAlerts']|default([]) %}
        {% for measurement in maSensor if measurement['label'] != 'timestamp' and measurement['usage']|default('') == 'contact' %}
            <li>{{ measurement['label']}}: {{ measurement['value']|trans }}</li>
        {% endfor %}
    {% endfor %}
    {% for shellySensor in currentStat['shelly']|default([]) if shellySensor['type'] == "door" %}
        <li>{{ shellySensor['name'] }}: {{ shellySensor['status']['label']|trans }}</li>
    {% endfor %}
    {% for motionSensor in currentStat['mystrom']|default([]) if motionSensor['type']|default('') == 'motion' %}
    <li>{{ motionSensor['name'] }}: {{ motionSensor['status']['label']|trans }}</li>
    {% endfor %}
    </ul>
</div>
{% endif %}
</div>
{% if not refresh|default(false) %}
{% if currentStat['smartFoxChart']|default(false) %}
<div class="row">
    <div class="small-12 large-6 columns refresh">
        <canvas id="currentPowerCanvas" ></canvas>
    </div>
    <div class="small-12 large-6 columns refresh">
        <canvas id="energyDayCanvas" ></canvas>
    </div>
</div>
{% endif %}
{% if currentStat['pcoWeb']|default(false) or currentStat['mobileAlerts']|default(false) or currentStat['conexio']|default(false) or currentStat['logoControl']|default(false) %}
<div class="row">
    <div class="small-12 columns refresh">
        <canvas id="twentyFourPowerCanvas" ></canvas>
    </div>
</div>
<div class="row">
    <div class="small-12 columns refresh">
        <canvas id="twentyFourTemperaturesCanvas" ></canvas>
    </div>
</div>
{% endif %}
<script>
    function updateChartCallback(chart, data, color)
    {
        if (data) {
            dataArr = JSON.parse(data);
        } else {
            dataArr = [];
        }
        if (color) {
            colorArr = JSON.parse(color);
        } else {
            colorArr = [];
        }

        updateChart(charts[chart], dataArr, colorArr);
    }

    function updateChart(chart, dataArr, colorArr)
    {
        for (var i = 0; i < dataArr.length; i++) {
            chart.data.datasets[i].data = [dataArr[i]];
            if (typeof(colorArr[i]) !== 'undefined') {
                if (dataArr[i] < 0) {
                    colorIndex = 0;
                } else {
                    colorIndex = 1;
                }
                chart.data.datasets[i].borderColor = [colorArr[i][colorIndex]];
                chart.data.datasets[i].backgroundColor = [colorArr[i][colorIndex]];
            }
        }
        chart.update();
    }

    var charts = new Object();
    {% if currentStat['smartFoxChart']|default(false) %}
    // currentPower
    charts.currentPower = new Chart(document.getElementById("currentPowerCanvas").getContext('2d'), {
        type: 'bar',
        data: { 
            datasets: [
            {
                label: '{% trans %}label.smartfox.int_power{% endtrans %}'
            },
            {
                label: '{% trans %}label.smartfox.pv_power{% endtrans %}'
            },
            {
                label: '{% trans %}label.smartfox.net_power{% endtrans %}'
            }
            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero:true
                    },
                    scaleLabel:{
                        display: true,
                        labelString: 'W',
                        fontColor: "#546372"
                    }
                }]
            },
            animation: false
        }
    });

    // energyDay
    charts.energyDay = new Chart(document.getElementById("energyDayCanvas").getContext('2d'), {
        type: 'bar',
        data: {
            datasets: [
            {
                label: '{% trans %}label.smartfox.energy_in_day{% endtrans %}',
                backgroundColor: ['red']
            },
            {
                label: '{% trans %}label.smartfox.energy_out_day{% endtrans %}',
                backgroundColor: ['chartreuse']
            },
            {
                label: '{% trans %}label.smartfox.energy_pv_day{% endtrans %}',
                backgroundColor: ['yellow']
            }{% if currentStat['conexio']|default(false) %},
            {
                label: '{% trans %}label.conexio.energy_day{% endtrans %}',
                backgroundColor: ['orange']
            }{% endif %}
            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero:true
                    },
                    scaleLabel:{
                        display: true,
                        labelString: 'kWh',
                        fontColor: "#546372"
                    }
                }]
            },
            animation: false
        }
    });

    // 24hPower
    charts.twentyFourPower = new Chart(document.getElementById("twentyFourPowerCanvas").getContext('2d'), {
        type: 'line',
        data: { 
            datasets: [
            {
                label: '{% trans %}label.smartfox.net_power{% endtrans %}',
                backgroundColor: ['darkblue'],
                data: [
                {% for sfData in history['smartFox']|default([]) %}
                    {
                        x: new Date("{{ sfData.timestamp|date("c") }}"),
                        y: {{ sfData.getData()['power_io']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.smartfox.pv_power{% endtrans %}',
                borderColor: ['yellow'],
                fill: false,
                data: [
                {% for sfData in history['smartFox']|default([]) %}
                    {
                        x: new Date("{{ sfData.timestamp|date("c") }}"),
                        y: {{ sfData.getData()['PvPower'][0]|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            }
            ]
        },
        options: {
            elements: {
                point: {
                    radius: 0 
                } 
            },
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero:true
                    },
                    scaleLabel:{
                        display: true,
                        labelString: 'W',
                        fontColor: "#546372"
                    }
                }],
                xAxes: [{
                    type: 'time',
                    time: {
                        displayFormats: {
                            minute: 'H:m'
                        }
                    }
                }]
            },
            animation: false
        }
    });
    {% endif %}
    {% if currentStat['pcoWeb']|default(false) or currentStat['mobileAlerts']|default(false) or currentStat['conexio']|default(false) or currentStat['logoControl']|default(false) %}
    // 24hTemperatures
    charts.twentyFourTemperatures = new Chart(document.getElementById("twentyFourTemperaturesCanvas").getContext('2d'), {
        type: 'line',
        data: { 
            datasets: [
            {% if currentStat['pcoWeb']|default(false) %}
            {
                label: '{% trans %}label.pco.water_temp{% endtrans %}',
                borderColor: ['blue'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['waterTemp']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.pco.outside_temp{% endtrans %}',
                borderColor: ['orange'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['outsideTemp']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.pco.set_distr_temp{% endtrans %}',
                borderColor: ['violet'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['setDistrTemp']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.pco.eff_distr_temp{% endtrans %}',
                borderColor: ['pink'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['effDistrTemp']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.pco.storage_temp{% endtrans %}',
                borderColor: ['darkred'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['storTemp']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.pco.cp_status{% endtrans %}',
                borderColor: ['grey'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['cpStatus']|default(0)|replace({'label.device.status.off':0, 'label.device.status.on':100}) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            }
            {% endif %}
            {% for idx, sensor in connectors['mobilealerts']['sensors']|default([]) %}{% for dataSetKey, dataSet in sensor if dataSet[2]|default(false) %}
            ,{
                label: '{{ history['mobileAlerts'][idx][history['mobileAlerts'][idx]|length-1].getData()[dataSetKey+1]['label']|default('unknown') }}',
                borderColor: '{{ dataSet[2] }}',
                fill: false,
                data: [
                {% for maData in history['mobileAlerts'][idx] %}
                    {
                        x: new Date("{{ maData.timestamp|date("c") }}"),
                        y: {{ maData.getData()[dataSetKey+1]['value']|default(0)|replace({'---': dataSet[3]|default(0)}) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            }{% endfor %}{% endfor %}
            {% for idx, sensor in connectors['conexio']['sensors']|default([]) if sensor[2] is defined %}
            ,{
                label: '{{ sensor[0] }}',
                borderColor: ['{{ sensor[2] }}'],
                fill: false,
                data: [
                {% for coData in history['conexio'] if coData.getData() %}
                    {% if not loop.first %},{% endif %} 
                    {
                        x: new Date("{{ coData.timestamp|date('c') }}"),
                        y: {{ coData.getData()[idx]|default(0) / sensor[3]|default(1) }}
                    }
                {% endfor %}
                ],
                {% if sensor[1] == "W" %}
                    yAxisID: "y-axis-W"
                {% else %}
                    yAxisID: "y-axis-°C"
                {% endif %}
            }
            {% endfor %}
            {% for idx, sensor in connectors['logocontrol']['sensors']|default([]) if sensor[2] is defined %}
            ,{
                label: '{{ sensor[0] }}',
                borderColor: ['{{ sensor[2] }}'],
                fill: false,
                data: [
                {% for coData in history['logoControl'] if coData.getData() %}
                    {% if not loop.first %},{% endif %}
                    {
                        x: new Date("{{ coData.timestamp|date('c') }}"),
                        y: {{ coData.getData()[sensor[0]]|default(0) / sensor[3]|default(1) }}
                    }
                {% endfor %}
                ],
                yAxisID: "y-axis-°C"
            }
            {% endfor %}
            ]
        },
        options: {
            elements: {
                point: {
                    radius: 0 
                } 
            },
            scales: {
                yAxes: [
                    {
                        position: "left",
                        id: "y-axis-°C",
                        ticks: {
                            beginAtZero:true
                        },
                        scaleLabel:{
                            display: true,
                            labelString: '°C',
                            fontColor: "#546372"
                        }
                    },
                    {
                        position: "right",
                        id: "y-axis-W",
                        ticks: {
                            beginAtZero:true
                        },
                        scaleLabel:{
                            display: true,
                            labelString: 'W',
                            fontColor: "#546372"
                        },
                        // grid line settings
                        gridLines: {
                            drawOnChartArea: false, // only want the grid lines for one axis to show up
                        },
                    }
                ],
                xAxes: [{
                    type: 'time',
                    time: {
                        displayFormats: {
                            minute: 'H:m'
                        }
                    }
                }]
            },
            animation: false
        }
    });
    {% endif %}
</script>

{% endif %}
