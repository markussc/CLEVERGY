{% set contactAvailable = false %}
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

{% if is_granted('ROLE_OWNER') %}
    <div id="pcowebModeModal" class="reveal" data-reveal>
      <h4 id="pcowebModeModalTitle">{% trans %}label.pco.mode{% endtrans %}</h4>
      <p class="lead">{% trans %}label.pco.select_pcoweb_mode_lead{% endtrans %}</p>
      <select id="pcowebModeSelect">
          <option value="0">{% trans %}label.pco.mode.auto{% endtrans %}</option>
          <option value="1">{% trans %}label.pco.mode.manual{% endtrans %}</option>
          {% if pcowebConnector.getIp() %}
              <option value="-1">{% trans %}label.pco.mode.holiday{% endtrans %}</option>
              <option value="-2">{% trans %}label.pco.mode.warmwater{% endtrans %}</option>
          {% endif %}
      </select>
      <hr>
      <button type="button" onclick="sendCommand(['settings', 'mode', '{% if pcowebConnector.getIp() %}pcoweb{% else %}wem{% endif %}', $('#pcowebModeSelect').val()])">{% trans %}label.pco.mode.save{% endtrans %}</button>
      <button class="close-button" data-close aria-label="Close modal" type="button">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div id="ppModeModal" class="reveal" data-reveal>
      <h4 id="ppModeModalTitle">{% trans %}label.pco.pp_status{% endtrans %}</h4>
      <p class="lead">{% trans %}label.pco.select_pp_mode_lead{% endtrans %}</p>
      <select id="ppModeSelect">
          <option value="0">{% trans %}label.pco.ppmode.summer{% endtrans %}</option>
          <option value="1">{% trans %}label.pco.ppmode.auto{% endtrans %}</option>
          <option value="2">{% trans %}label.pco.ppmode.holiday{% endtrans %}</option>
          <option value="3">{% trans %}label.pco.ppmode.party{% endtrans %}</option>
          <option value="4">{% trans %}label.pco.ppmode.2nd{% endtrans %}</option>
      </select>
      <hr>
      <button type="button" onclick="sendCommand(['pcoweb', 'mode', $('#ppModeSelect').val()])">{% trans %}label.pco.ppmode.save{% endtrans %}</button>
      <button class="close-button" data-close aria-label="Close modal" type="button">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
{% endif %}
<script>
    function menuToggle(btn, elemId)
    {
        if (btn.hasClass('hollow')) {
            // is inactive
            $('.content').hide();
            $('.menu-btn').addClass('hollow');
            btn.removeClass('hollow');
            $('#'+elemId+'_container').toggle();
        } else {
            // is active
            $('.content').hide();
            $('.menu-btn').addClass('hollow');
        }
    }
</script>
<div class="row" style="margin-top: 20px;">
    <div class="small-12 columns small-centered" style="text-align:center;">
        {% if currentStat['smartFox'] is defined and currentStat['smartFox'] != 0 %}
            <button class="menu-btn fas fa-solar-panel hollow button small" style="border-radius:5px;" onclick="menuToggle($(this), 'smartfox');"><span style="font-family:arial;">&nbsp;&nbsp;{% trans %}label.energy{% endtrans %}</span></button>
        {% endif %}
        {% if currentStat['conexio']|default(false) or currentStat['logoControl']|default(false) or currentStat['taCmi']|default(false)%}
            <button class="menu-btn fas fa-sun hollow button small" style="border-radius:5px;" onclick="menuToggle($(this), 'conexio');"><span style="font-family:arial;">&nbsp;&nbsp;{% trans %}label.solarheat{% endtrans %}</span></button>
        {% endif %}
        {% if currentStat['pcoWeb'] is defined %}
            <button class="menu-btn fas fa-fire hollow button small" style="border-radius:5px;" onclick="menuToggle($(this), 'pcoWeb');"><span style="font-family:arial;">&nbsp;&nbsp;{% trans %}label.heating{% endtrans %}</span></button>
        {% endif %}
        {% if currentStat['netatmo']|default(false) or currentStat['mobileAlerts']|default(false) or currentStat['pcoWeb']|default(false) or currentStat['openweathermap']|default(false) %}
            <button class="menu-btn fas fa-thermometer-half hollow button small" style="border-radius:5px;" onclick="menuToggle($(this), 'mobileAlerts');"><span style="font-family:arial;">&nbsp;&nbsp;{% trans %}label.climate{% endtrans %}</span></button>
        {% endif %}
    </div>
</div>
<div class="row">
{% if currentStat['smartFox'] is defined and currentStat['smartFox'] != 0 %}
    <div id="smartfox_container" class="content" style="display:none;">
        <div class="small-12 columns refresh" id="smartfoxOuter">
            <div id="smartfox">
            <ul>
                <li>{% trans %}label.smartfox.int_power{% endtrans %}: {{ currentStat['smartFox']['power_io'] + currentStat['smartFox']['PvPower'][0] + currentStat['smartFox']['PvPower'][1]|default(0) - currentStat['smartFox']['StoragePower'] }} W</li> {# TODO: sum up all PV powers #}
                <li>{% trans %}label.smartfox.pv_power{% endtrans %}: {{ currentStat['smartFox']['PvPower']|join(' W, ') }} W</li>
                {% if currentStat['smartFox']['StoragePower'] is defined %}<li>{% trans %}label.smartfox.storage_power{% endtrans %} {% if currentStat['smartFox']['StoragePower'] >= 0 %}{% trans %}label.storage.power_in{% endtrans %}{% else %}{% trans %}label.storage.power_out{% endtrans %}{% endif %}: {{ currentStat['smartFox']['StoragePower'] }} W</li>{% endif %}
                <li>{% trans %}label.smartfox.net_power{% endtrans %}: {{ currentStat['smartFox']['power_io'] }} W</li>
                <li>{% trans %}label.smartfox.self_usage_today{% endtrans %}: {% if currentStat['smartFox']['energyToday'] and currentStat['smartFox']['energyToday'] >= currentStat['smartFox']['day_energy_out'] %}{{ ((currentStat['smartFox']['energyToday'] - currentStat['smartFox']['day_energy_out']) / currentStat['smartFox']['energyToday'] * 100) |round }} %{% else %}---{% endif %}</li>
                <li>{% trans %}label.smartfox.self_suff_degree_today{% endtrans %}: {% if currentStat['smartFox']['energyToday'] and currentStat['smartFox']['energyToday'] >= currentStat['smartFox']['day_energy_out'] %}{{ (100/(currentStat['smartFox']['energyToday'] + currentStat['smartFox']['day_energy_in'] - currentStat['smartFox']['day_energy_out'])*(currentStat['smartFox']['energyToday']-currentStat['smartFox']['day_energy_out']))|round }} %{% else %}---{% endif %}</li>
            </ul>
            </div>
            <div class="chart" style="display:none;">
                <span class="chartId">energyDay</span>
                <span class="chartData">[{{ currentStat['smartFox']['day_energy_in'] / 1000 }}, {{ currentStat['smartFox']['day_energy_out'] / 1000 }}, {{ currentStat['smartFox']['energyToday']/1000 }}{% if currentStat['smartFox']['altEnergyToday'] is defined %}, {{ currentStat['smartFox']['altEnergyToday']/1000 }}{% endif %}{% if currentStat['smartFox']['storageEnergyToday_in'] is defined %}, {{ currentStat['smartFox']['storageEnergyToday_in']/1000 }}, {{ currentStat['smartFox']['storageEnergyToday_out']/1000 }}{% endif %}{% if currentStat['conexio']|default(false) %}, {{ currentStat['conexio']['energyToday']|default(0) }}{% endif %}]</span>
            </div>
        </div>
    </div>
{% endif %}
{% if currentStat['conexio']|default(false) or currentStat['logoControl']|default(false) or currentStat['taCmi']|default(false) %}
    <div id="conexio_container" class="content" style="display:none;">
        <div class="small-12 columns refresh" id="conexio">
            <ul>
            {% for idx, sensor in connectors['conexio']['sensors']|default([]) %}
                <li>{{ sensor[0] }}: {{ currentStat['conexio'][idx]|default('--') }}{{ sensor[1] }}</li>
            {% endfor %}
            {% for sensor in connectors['logocontrol']['sensors']|default([]) %}
                {{ sensor[0] }}: {{ currentStat['logoControl'][sensor[0]] }}{{ sensor[1] }}<br/>
            {% endfor %}
            {% for sensor in connectors['tacmi']['sensors']|default([]) %}
                {{ sensor[0] }}: {{ currentStat['taCmi'][sensor[0]] }}{{ sensor[1] }}<br/>
            {% endfor %}
            </ul>
        </div>
    </div>
{% endif %}
{% if currentStat['pcoWeb'] is defined %}
    <div id="pcoWeb_container" class="content" style="display:none;">
        <div class="small-12 columns refresh" id="pcoWeb">
            {% if currentStat['pcoWeb']['ppError']|default(false) %}<strong style="color:red;">{% trans %}label.pcoweb.pp_error{% endtrans %}: {{ currentStat['pcoWeb']['ppError']|default("unknown") }}</strong>{% endif %}
            <ul>
                <li>{% trans %}label.pco.water_temp{% endtrans %}: {{ currentStat['pcoWeb']['waterTemp']|default('---') }}째C</li>
                <li>{% trans %}label.pco.storage_temp{% endtrans %}: {{ currentStat['pcoWeb']['storTemp']|default('---') }}째C</li>
                <li>{% trans %}label.pco.cp_status{% endtrans %}: {{ currentStat['pcoWeb']['cpStatus']|default('---')|trans }}</li>
                <li>{% trans %}label.pco.set_distr_temp{% endtrans %}: {{ currentStat['pcoWeb']['setDistrTemp']|default('---') }}째C</li>
                <li>{% trans %}label.pco.eff_distr_temp{% endtrans %}: {{ currentStat['pcoWeb']['effDistrTemp']|default('---') }}째C</li>
                {% if pcowebConnector.getIp() %}
                <li>{% trans %}label.pco.mode{% endtrans %}: <a href="#" data-open="pcowebModeModal">{{ currentStat['pcoWeb']['mode']|default('---')|trans }}</a></li>
                <li>{% trans %}label.pco.pp_mode{% endtrans %}: <a href="#" data-open="ppModeModal">{{ currentStat['pcoWeb']['ppMode']|default('---')|trans }}</a></li>
                <li>{% trans %}label.pco.pp_status{% endtrans %}: {{ currentStat['pcoWeb']['ppStatus']|default('label.device.status.off')|trans }}{% if currentStat['pcoWeb']['ppStatusMsg']|default('---')|trans != currentStat['pcoWeb']['ppStatus']|default('---')|trans %} ({{ currentStat['pcoWeb']['ppStatusMsg']|default('---')|trans }}){% endif %}</li>
                {% else %}
                <li>{% trans %}label.pco.mode{% endtrans %}: <a href="#" data-open="pcowebModeModal">{{ currentStat['pcoWeb']['mode']|default('---')|trans }}</a></li>
                <li>{% trans %}label.pco.pp_mode{% endtrans %}: {{ currentStat['pcoWeb']['ppMode']|default('---')|trans }}</li>
                <li>{% trans %}label.pco.pp_status{% endtrans %}: {% if currentStat['pcoWeb']['ppStatus']|default(0) == 0 or currentStat['pcoWeb']['ppStatus']|default(0) == 'Aus' or currentStat['pcoWeb']['ppStatus']|default(0) == 'label.device.status.off' %}{% trans %}label.device.status.off{% endtrans%}{% else %}{{ [currentStat['pcoWeb']['ppStatus']|default(0)|replace({' %': ''}), '%']|join('') }}{% endif %}{% if currentStat['pcoWeb']['ppStatusMsg']|default('---')|trans != currentStat['pcoWeb']['ppStatus']|default('---')|trans %}{% endif %}</li>
                {% endif %}
                <li>{% trans %}label.pco.pre_temp{% endtrans %}: {{ currentStat['pcoWeb']['preTemp']|default('---') }}째C</li>
                <li>{% trans %}label.pco.back_temp{% endtrans %}: {{ currentStat['pcoWeb']['backTemp']|default('---') }}째C</li>
                {% if pcowebConnector.getIp() %}
                <li>{% trans %}label.pco.back_set_temp{% endtrans %}: {{ currentStat['pcoWeb']['backSetTemp']|default('---') }}째C</li>
                <li>{% trans %}label.pco.water_set_temp{% endtrans %}: {{ currentStat['pcoWeb']['waterSetTemp']|default('---') }}째C</li>
                {% endif %}
                <li>{% trans %}label.pco.pp_source_in_temp{% endtrans %}: {{ currentStat['pcoWeb']['ppSourceIn']|default('---') }}째C</li>
                <li>{% trans %}label.pco.pp_source_out_temp{% endtrans %}: {{ currentStat['pcoWeb']['ppSourceOut']|default('---') }}째C</li>
            </ul>
        </div>
    </div>
{% endif %}
{% if currentStat['netatmo']|default(false) or currentStat['mobileAlerts']|default(false) or currentStat['pcoWeb']|default(false) or currentStat['openweathermap']|default(false) %}
    <div id="mobileAlerts_container" class="content" style="display:none;">
        <div class="small-12 columns refresh" id="mobileAlerts">
            <ul>
                {% if currentStat['openweathermap']|default(false) %}
                    <li>{% trans %}label.openweathermap.clouds_current{% endtrans %}: {{ currentStat['openweathermap']['currentClouds'] }} %</li>
                    <li>{% trans %}label.openweathermap.clouds_next_daylight{% endtrans %}: {{ currentStat['openweathermap']['cloudsNextDaylight'] }}%</li>
                {% endif %}
                {% if currentStat['pcoWeb']|default(false) %}<li>{% trans %}label.pco.outside_temp{% endtrans %}: {{ currentStat['pcoWeb']['outsideTemp'] }} 째C</li>{% endif %}
            {% for maSensor in currentStat['mobileAlerts']|default([]) %}
                {% if maSensor is iterable %}
                    {% for measurement in maSensor|filter(measurement => measurement and measurement['label'] != 'timestamp') %}
                        {% if measurement['usage']|default('') == 'contact' %}
                            {% set contactAvailable = true %}
                        {% else %}
                        <li>{{ measurement['label']}}: {{ measurement['value']|replace({"43530": "???", "65295": "???"}) }} {{ measurement['unit'] }}</li>
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endfor %}
            {%  if currentStat['netatmo']|default(false) %}
                <li>{{ currentStat['netatmo'].getStationData()['name'] }}: {{ currentStat['netatmo'].getStationData()['temp'] }}째C, {{ currentStat['netatmo'].getStationData()['humidity'] }}%</li>
                {%  for moduleData in currentStat['netatmo'].getModulesData() %}
                    <li>{{ moduleData['name'] }}: {{ moduleData['temp'] }}째C, {{ moduleData['humidity'] }}%</li>
                {% endfor %}
            {% endif %}
            </ul>
        </div>
    </div>
{% endif %}
</div>
<hr>
{% if not refresh|default(false) %}
{% if currentStat['smartFoxChart']|default(false) %}
<div class="row">
    <div class="small-12 large-4 columns small-centered">
        <div id="piechart_energymix"></div>
    </div>
    <div class="small-12 medium-12 large-8 columns small-centered refresh">
        <canvas id="energyDayCanvas"></canvas>
    </div>
</div>
{% endif %}
{% if currentStat['pcoWeb']|default(false) or currentStat['mobileAlerts']|default(false) or currentStat['netatmo']|default(false) or currentStat['conexio']|default(false) or currentStat['logoControl']|default(false) or currentStat['taCmi']|default(false) or history['ecar']|default(false) %}
<hr>
<div class="row">
    <div class="small-12 medium-4 columns">
        <label for="from">{% trans %}label.overview.history.set_interval.from{% endtrans %}</label>
        <input type="datetime-local" id="from" value="{{ from|date("Y-m-d") }}T{{ from|date("H:i") }}">
    </div>
    <div class="small-12 medium-4 columns">
        <label for="to">{% trans %}label.overview.history.set_interval.to{% endtrans %}</label>
        <input type="datetime-local" id="to" value="{{ to|date("Y-m-d") }}T{{ to|date("H:i") }}">
    </div>
    <div class="small-12 medium-4 columns">
        <label for="historyIntervalButton">&nbsp;</label>
        <button type="button" class="button" id="historyIntervalButton" onclick="setHistoryInterval()">{% trans %}label.overview.history.set_interval.submit{% endtrans %}</button>
    </div>
</div>
<div class="row">
    <div class="small-12 columns refresh">
        <canvas id="twentyFourPowerCanvas" ></canvas>
    </div>
</div>
<div class="row">
    <div class="small-12 columns refresh">
        <canvas id="twentyFourTemperaturesCanvas" ></canvas>
    </div>
</div>
{% endif %}
<script>
    function setHistoryInterval()
    {
        var from = $("#from").val();
        var to = $("#to").val();
        window.location = "?details=true&from=" + from + "&to=" + to;
    }

    function updateChartCallback(chart, data, color)
    {
        if (data) {
            dataArr = JSON.parse(data);
        } else {
            dataArr = [];
        }
        if (color) {
            colorArr = JSON.parse(color);
        } else {
            colorArr = [];
        }

        updateChart(charts[chart], dataArr, colorArr);
    }

    function updateChart(chart, dataArr, colorArr)
    {
        for (var i = 0; i < dataArr.length; i++) {
            chart.data.datasets[i].data = [dataArr[i]];
            if (typeof(colorArr[i]) !== 'undefined') {
                if (dataArr[i] < 0) {
                    colorIndex = 0;
                } else {
                    colorIndex = 1;
                }
                chart.data.datasets[i].borderColor = [colorArr[i][colorIndex]];
                chart.data.datasets[i].backgroundColor = [colorArr[i][colorIndex]];
            }
        }
        chart.update();
    }

    var charts = new Object();
    {% if currentStat['smartFoxChart']|default(false) %}
    // energyDay
    charts.energyDay = new Chart(document.getElementById("energyDayCanvas").getContext('2d'), {
        type: 'bar',
        data: {
            labels: [''],
            datasets: [
            {
                label: '{% trans %}label.smartfox.energy_in_day{% endtrans %}',
                backgroundColor: ['grey']
            },
            {
                label: '{% trans %}label.smartfox.energy_out_day{% endtrans %}',
                backgroundColor: ['darkblue']
            },
            {
                label: '{% trans %}label.smartfox.energy_pv_day{% endtrans %}{% if smartfoxConnector.hasAltPv() %} ({% trans %}label.smartfox.total{% endtrans %}){% endif %}',
                backgroundColor: ['yellow']
            }{%if smartfoxConnector.hasAltPv() %},
            {
                label: '{% trans %}label.smartfox.energy_pv_alt_day{% endtrans %}',
                backgroundColor: ['orange']
            }{% endif %}{%if smartfoxConnector.hasStorage() %},
            {
                label: '{% trans %}label.smartfox.storage_in_day{% endtrans %}',
                backgroundColor: ['green']
            },
            {
                label: '{% trans %}label.smartfox.storage_out_day{% endtrans %}',
                backgroundColor: ['chartreuse']
            }{% endif %}{% if currentStat['conexio']|default(false) %},
            {
                label: '{% trans %}label.conexio.energy_day{% endtrans %}',
                backgroundColor: ['red']
            }{% endif %}
            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero:true
                    },
                    scaleLabel:{
                        display: true,
                        labelString: 'kWh',
                        fontColor: "#546372"
                    }
                }]
            },
            animation: false,
            tooltips: {
                enabled: true,
                mode: 'single',
                callbacks: {
                    label: function(tooltipItems, data) {
                        return data.datasets[tooltipItems.datasetIndex].label + ': ' + tooltipItems.yLabel + ' kWh';
                    }
                }
            }
        }
    });

    // 24hPower
    charts.twentyFourPower = new Chart(document.getElementById("twentyFourPowerCanvas").getContext('2d'), {
        type: 'line',
        data: { 
            datasets: [
            {
                label: '{% trans %}label.smartfox.net_power{% endtrans %}',
                backgroundColor: ['darkblue'],
                data: [
                {% for sfData in history['smartFox']|default([]) %}
                    {
                        x: new Date("{{ sfData.timestamp|date("c") }}"),
                        y: {{ sfData.getData()['power_io']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ],
                yAxisID: "y-axis-W"
            },
            {
                label: '{% trans %}label.smartfox.pv_power{% endtrans %}{% if smartfoxConnector.hasAltPv() %} ({% trans %}label.smartfox.total{% endtrans %}){% endif %}',
                borderColor: ['yellow'],
                fill: false,
                data: [
                {% for sfData in history['smartFox']|default([]) %}
                    {
                        x: new Date("{{ sfData.timestamp|date("c") }}"),
                        y: {{ sfData.getData()['PvPower'][0]|default(0) + sfData.getData()['PvPower'][1]|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ],
                yAxisID: "y-axis-W"
            }{% if smartfoxConnector.hasAltPv() %},
            {
                label: '{% trans %}label.smartfox.pv_power_alternative{% endtrans %}',
                borderColor: ['orange'],
                fill: false,
                data: [
                {% for sfData in history['smartFox']|default([]) %}
                    {
                        x: new Date("{{ sfData.timestamp|date("c") }}"),
                        y: {{ sfData.getData()['PvPower'][1]|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ],
                yAxisID: "y-axis-W"
            }{% endif %}{% if smartfoxConnector.hasStorage() %},
            {
                label: '{% trans %}label.smartfox.storage_power{% endtrans %}',
                borderColor: ['chartreuse'],
                fill: false,
                data: [
                {% for sfData in history['smartFox']|default([]) %}
                    {
                        x: new Date("{{ sfData.timestamp|date("c") }}"),
                        y: {{ -1*sfData.getData()['StoragePower']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ],
                yAxisID: "y-axis-W"
            },
            {
                label: '{% trans %}label.smartfox.storage_soc{% endtrans %}',
                borderColor: ['green'],
                fill: false,
                data: [
                {% for sfData in history['smartFox']|default([]) %}
                    {
                        x: new Date("{{ sfData.timestamp|date("c") }}"),
                        y: {{ sfData.getData()['StorageSoc']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ],
                yAxisID: "y-axis-%"
            }{% endif %}
            ]
        },
        options: {
            elements: {
                point: {
                    radius: 0 
                } 
            },
            scales: {
                yAxes: [
                    {
                        position: "left",
                        id: "y-axis-%",
                        ticks: {
                            beginAtZero:true
                        },
                        scaleLabel:{
                            display: true,
                            labelString: '%',
                            fontColor: "#546372"
                        }
                    },
                    {
                        position: "right",
                        id: "y-axis-W",
                        ticks: {
                            beginAtZero:false
                        },
                        scaleLabel:{
                            display: true,
                            labelString: 'W',
                            fontColor: "#546372"
                        },
                        // grid line settings
                        gridLines: {
                            drawOnChartArea: false, // only want the grid lines for one axis to show up
                        },
                    }
                ],
                xAxes: [{
                    type: 'time',
                    time: {
                        displayFormats: {
                            minute: 'H:m'
                        }
                    }
                }]
            },
            animation: false
        }
    });

    // energy mix
    var elem = document.getElementById('piechart_energymix');
    if (elem) {
            google.charts.load('current', {'packages':['corechart']});
            google.charts.setOnLoadCallback(drawChartEnergymix);

            function drawChartEnergymix() {

              var data = google.visualization.arrayToDataTable([
                ['Rate', 'Value'],
                ['{% trans %}label.smartfox.pv_power{% endtrans %}', {{ max(0, currentStat['smartFox_energy_mix']['pv']|default(0)) }}],
                ['{% trans %}label.highrate{% endtrans %}',  {{ max(0, currentStat['smartFox_energy_mix']['high']|default(0)) }}],
                ['{% trans %}label.normalrate{% endtrans %}',  {{ max(0, currentStat['smartFox_energy_mix']['normal']|default(0)) }}],
                ['{% trans %}label.lowrate{% endtrans %}', {{ max(0, currentStat['smartFox_energy_mix']['low']|default(0)) }}]
              ]);

            var chart = new google.visualization.PieChart(elem);

            var options = {
                title: '{% trans %}label.energymix{% endtrans %}'
            };
            var formatter = new google.visualization.NumberFormat({
               suffix: ' kWh'
            });

            formatter.format(data, 1);
            chart.draw(data, options);
        }
    }
    {% endif %}
    {% if currentStat['smartFox']|default(false) or currentStat['pcoWeb']|default(false) or currentStat['mobileAlerts']|default(false) or currentStat['netatmo']|default(false) or currentStat['conexio']|default(false) or currentStat['logoControl']|default(false) or currentStat['taCmi']|default(false) or history['ecar']|default(false) %}
    // 24hTemperatures
    charts.twentyFourTemperatures = new Chart(document.getElementById("twentyFourTemperaturesCanvas").getContext('2d'), {
        type: 'line',
        data: { 
            datasets: [
            {% set firstDataset24 = true %}
            {% if currentStat['smartFox']['consumptionControl1Percent']|default(-1) >= 0 %}
            {% set firstDataset24 = false %}
            {
                label: '{% trans %}label.smartfox.heater{% endtrans %}',
                borderColor: ['yellow'],
                fill: false,
                data: [
                {% for sfData in history['smartFox']|default([]) %}
                    {
                        x: new Date("{{ sfData.timestamp|date("c") }}"),
                        y: {{ sfData.getData()['consumptionControl1Percent']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            }
            {% endif %}
            {% if currentStat['pcoWeb']|default(false) %}
            {% if not firstDataset24  %},{% endif %}
            {% set firstDataset24 = false %}
            {
                label: '{% trans %}label.pco.water_temp{% endtrans %}',
                borderColor: ['blue'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['waterTemp']|default(0)|replace({'U': 0}) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.pco.outside_temp{% endtrans %}',
                borderColor: ['orange'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['outsideTemp']|default(0)|replace({'U': 0}) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.pco.set_distr_temp{% endtrans %}',
                borderColor: ['violet'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['setDistrTemp']|default(0)|replace({'--':0, '---':0, 'U':0}) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.pco.eff_distr_temp{% endtrans %}',
                borderColor: ['pink'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['effDistrTemp']|default(0)|replace({'U': 0}) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.pco.storage_temp{% endtrans %}',
                borderColor: ['darkred'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['storTemp']|default(0)|replace({'---':0, 'U':0}) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            },
            {
                label: '{% trans %}label.pco.cp_status{% endtrans %}',
                borderColor: ['grey'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['cpStatus']|default(0)|replace({'label.device.status.off':0, 'label.device.status.on':100, 'U':0}) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            }{% if not pcowebConnector.getIp() %},
            {
                label: '{% trans %}label.pco.pp_status{% endtrans %}',
                borderColor: ['green'],
                fill: false,
                data: [
                {% for pwData in history['pcoWeb'] %}
                    {
                        x: new Date("{{ pwData.timestamp|date("c") }}"),
                        y: {{ pwData.getData()['ppStatus']|default(0)|replace({'Aus':0, '--':20, '%':'', ' ': '', 'U':0}) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            }
            {% endif %}
            {% endif %}
            {% for idx, sensor in connectors['mobilealerts']['sensors']|default([]) %}{% for dataSetKey, dataSet in sensor|filter(dataSet => dataSet[2]|default(false)) %}
            {% if not firstDataset24  %},{% endif %}
            {% set firstDataset24 = false %}
            {
                label: '{{ history['mobileAlerts'][idx][history['mobileAlerts'][idx]|length-1].getData()[dataSetKey+1]['label']|default('unknown') }}',
                borderColor: '{{ dataSet[2] }}',
                fill: false,
                data: [
                {% for maData in history['mobileAlerts'][idx] %}
                    {
                        x: new Date("{{ maData.timestamp|date("c") }}"),
                        y: {{ maData.getData()[dataSetKey+1]['value']|default(0)|replace({'---': dataSet[3]|default(0), '43530': 0, '65295': 0}) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            }{% endfor %}{% endfor %}
            {% for ecar in connectors['ecar']|default([]) %}
            {% if not firstDataset24  %},{% endif %}
            {% set firstDataset24 = false %}
            {
                label: '{{ ecar['name'] }}',
                borderColor: 'green',
                fill: false,
                data: [
                {% for ecarData in history['ecar'][ecar['carId']] %}
                    {
                        x: new Date("{{ ecarData.timestamp|date("c") }}"),
                        y: {{ ecarData.getData()['data']['soc']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ]
            }{% endfor %}
            {% if connectors['netatmo']['deviceid']|default(false) %}
            {% if not firstDataset24  %},{% endif %}
            {% set firstDataset24 = false %}
            {
                label: '{{ history['netatmo'][0].getStationData()['name']|default('undefined') }} {% trans %}label.temperature{% endtrans%}',
                borderColor: ['red'],
                fill: false,
                data: [
                    {% for naData in history['netatmo'] %}
                    {
                        x: new Date("{{ naData.timestamp|date("c") }}"),
                        y: {{ naData.getStationData()['temp']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ],
            }
            ,{
                label: '{{ history['netatmo'][0].getStationData()['name']|default('undefined') }} {% trans %}label.humidity{% endtrans%}',
                borderColor: ['blue'],
                fill: false,
                data: [
                    {% for naData in history['netatmo'] %}
                    {
                        x: new Date("{{ naData.timestamp|date("c") }}"),
                        y: {{ naData.getStationData()['humidity']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ],
            }
            {% for module in connectors['netatmo']['modules'] %}
            ,{
                label: '{{ history['netatmo'][0].getModuleData(module['deviceid'])['name']|default('undefined') }} {% trans %}label.temperature{% endtrans%}',
                borderColor: ['#ff5733'],
                fill: false,
                data: [
                    {% for naData in history['netatmo'] %}
                    {
                        x: new Date("{{ naData.timestamp|date("c") }}"),
                        y: {{ naData.getModuleData(module['deviceid'])['temp']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ],
            }
            ,{
                label: '{{ history['netatmo'][0].getModuleData(module['deviceid'])['name']|default('undefined') }} {% trans %}label.humidity{% endtrans%}',
                borderColor: ['#33e9ff'],
                fill: false,
                data: [
                    {% for naData in history['netatmo'] %}
                    {
                        x: new Date("{{ naData.timestamp|date("c") }}"),
                        y: {{ naData.getModuleData(module['deviceid'])['humidity']|default(0) }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
                ],
            }
            {% endfor %}
            {% endif %}
            {% for idx, sensor in connectors['conexio']['sensors']|default([])|filter(sensor => sensor[2] is defined) %}
            {% if not firstDataset24  %},{% endif %}
            {% set firstDataset24 = false %}
            {
                label: '{{ sensor[0] }}',
                borderColor: ['{{ sensor[2] }}'],
                fill: false,
                data: [
                {% for coData in history['conexio']|filter(coData => coData.getData()) %}
                    {% if not loop.first %},{% endif %} 
                    {
                        x: new Date("{{ coData.timestamp|date('c') }}"),
                        y: {{ coData.getData()[idx]|default(0) / sensor[3]|default(1) }}
                    }
                {% endfor %}
                ],
                {% if sensor[1] == "W" %}
                    yAxisID: "y-axis-W"
                {% else %}
                    yAxisID: "y-axis-째C"
                {% endif %}
            }
            {% endfor %}
            {% for idx, sensor in connectors['logocontrol']['sensors']|default([])|filter(sensor => sensor[2] is defined) %}
            {% if not firstDataset24  %},{% endif %}
            {% set firstDataset24 = false %}
            {
                label: '{{ sensor[0] }}',
                borderColor: ['{{ sensor[2] }}'],
                fill: false,
                data: [
                {% for coData in history['logoControl']|filter(coData => coData.getData()) %}
                    {% if not loop.first %},{% endif %}
                    {
                        x: new Date("{{ coData.timestamp|date('c') }}"),
                        y: {{ coData.getData()[sensor[0]]|default(0) / sensor[3]|default(1) }}
                    }
                {% endfor %}
                ],
                yAxisID: "y-axis-째C"
            }
            {% endfor %}
            {% for idx, sensor in connectors['tacmi']['sensors']|default([])|filter(sensor => sensor[2] is defined) %}
            {% if not firstDataset24  %},{% endif %}
            {% set firstDataset24 = false %}
            {
                label: '{{ sensor[0] }}',
                borderColor: ['{{ sensor[2] }}'],
                fill: false,
                data: [
                {% for coData in history['taCmi']|filter(coData => coData.getData()) %}
                    {% if not loop.first %},{% endif %}
                    {
                        x: new Date("{{ coData.timestamp|date('c') }}"),
                        y: {{ coData.getData()[sensor[0]]|default(0) / sensor[3]|default(1) }}
                    }
                {% endfor %}
                ],
                yAxisID: "y-axis-째C"
            }
            {% endfor %}
            ]
        },
        options: {
            elements: {
                point: {
                    radius: 0 
                } 
            },
            scales: {
                yAxes: [
                    {
                        position: "left",
                        id: "y-axis-째C",
                        ticks: {
                            beginAtZero:true
                        },
                        scaleLabel:{
                            display: true,
                            labelString: '째C, %',
                            fontColor: "#546372"
                        }
                    },
                    {
                        position: "right",
                        id: "y-axis-W",
                        ticks: {
                            beginAtZero:true
                        },
                        scaleLabel:{
                            display: true,
                            labelString: 'W',
                            fontColor: "#546372"
                        },
                        // grid line settings
                        gridLines: {
                            drawOnChartArea: false, // only want the grid lines for one axis to show up
                        },
                    }
                ],
                xAxes: [{
                    type: 'time',
                    time: {
                        displayFormats: {
                            minute: 'H:m'
                        }
                    }
                }]
            },
            animation: false
        }
    });
    {% endif %}
</script>

{% endif %}
