{% extends 'base.html.twig' %}
{% block meta %}<meta http-equiv="refresh" content="10" />{% endblock %}
    
{% block body %}
    <div class="row">
        <div class="small-12 large-3 columns">
            <h3>{% trans %}label.energy{% endtrans %}</h3>
            <ul>
                <li>SmartFox Power: {{ currentStat['smartFox']['power']['power_io'] }} W</li>
            </ul>
        </div>
        <div class="small-12 large-3 columns">
            <h3>{% trans %}label.heating{% endtrans %}</h3>
            <ul>
                <li>Outside Temperature: {{ currentStat['pcoWeb']['outsideTemp'] }} °C</li>
                <li>Water Temperature: {{ currentStat['pcoWeb']['waterTemp'] }} °C</li>
            </ul>
        </div>
        <div class="small-12 large-3 columns">
            <h3>{% trans %}label.climate{% endtrans %}</h3>
            <ul>
            {% for maSensor in currentStat['mobileAlerts'] %}
                {% for measurement in maSensor if measurement['label'] != 'timestamp' %}
                    <li>{{ measurement['label']}}: {{ measurement['value'] }} {{ measurement['unit'] }}</li>
                {% endfor %}
            {% endfor %}
            </ul>
        </div>
        <div class="small-12 large-3 columns">
            <h3>{% trans %}label.devices{% endtrans %}</h3>
            <ul>
            {% for key, device in currentStat['edimax'] %}
                <li>
                    {{ device['name']}}: <a href="javascript:void(0);" onclick="sendCommandToDevice(['edimax', {{ key }}, {{ (device['status']['val'] + 1) % 2 }}])">{{ device['status']['label']|trans }}</a>
                </li>
            {% endfor %}
            </ul>
        </div>
    </div>
    {#
    <div class="row">
        <div class="small-12 columns">
            <canvas id="myChart" width="100%;" height="50%;"></canvas>
        </div>
    </div>
    #}
{% endblock %}

{% block javascripts %}
    <script>
        function sendCommandToDevice(command)
        {
            var url = "{{ path('command_exec', {'command': 'command_val'}) }}";
            url = url.replace('command_val', JSON.stringify(command));
            window.location = url;
        }
    </script>
    {#
    <script>
        var ctx = document.getElementById("myChart").getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
                datasets: [{
                    label: '# of notifications per system',
                    data: [12, 19, 3, 5, 2, 3],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255,99,132,1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero:true
                        }
                    }]
                }
            }
        });
    </script>
    #}
{% endblock %}
